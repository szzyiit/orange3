<?xml version='1.0' encoding='utf-8'?>
<scheme version="2.0" title="" description="">
	<nodes>
		<node id="0" name="文件(File)" qualified_name="Orange.widgets.data.owfile.OWFile" project_name="Orange3-zh" version="" title="销售数据" position="(140.0, 371.0)" />
		<node id="1" name="python脚本(Python Script)" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3-zh" version="" title="时序数据预处理" position="(304.0, 393.0)" />
		<node id="2" name="python脚本(Python Script)" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3-zh" version="" title="plot_periodogram" position="(244.0, 230.0)" />
		<node id="3" name="python脚本(Python Script)" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3-zh" version="" title="seasonal_plot" position="(334.0, 224.0)" />
		<node id="4" name="python脚本(Python Script)" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3-zh" version="" title="建立周期性特征" position="(456.0, 377.0)" />
		<node id="5" name="python脚本(Python Script)" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3-zh" version="" title="plot_periodogram (1)" position="(583.0, 214.0)" />
		<node id="6" name="python脚本(Python Script)" qualified_name="Orange.widgets.data.owpythonscript.OWPythonScript" project_name="Orange3-zh" version="" title="python脚本(Python Script)" position="(583.0, 375.0)" />
		<node id="7" name="数据表(Data Table)" qualified_name="Orange.widgets.data.owtable.OWDataTable" project_name="Orange3-zh" version="" title="数据表(Data Table) (1)" position="(274.0, 520.0)" />
	</nodes>
	<links>
		<link id="0" source_node_id="0" sink_node_id="1" source_channel="数据(Data)" sink_channel="数据(Data)" enabled="true" />
		<link id="1" source_node_id="2" sink_node_id="1" source_channel="对象(Object)" sink_channel="对象(Object)" enabled="true" />
		<link id="2" source_node_id="3" sink_node_id="1" source_channel="对象(Object)" sink_channel="对象(Object)" enabled="true" />
		<link id="3" source_node_id="1" sink_node_id="4" source_channel="对象(Object)" sink_channel="对象(Object)" enabled="true" />
		<link id="4" source_node_id="4" sink_node_id="6" source_channel="对象(Object)" sink_channel="对象(Object)" enabled="true" />
		<link id="5" source_node_id="5" sink_node_id="6" source_channel="对象(Object)" sink_channel="对象(Object)" enabled="true" />
		<link id="6" source_node_id="0" sink_node_id="7" source_channel="数据(Data)" sink_channel="数据(Data)" enabled="true" />
	</links>
	<annotations />
	<thumbnail />
	<node_properties>
		<properties node_id="0" format="pickle">gASVVg0AAAAAAAB9lCiMEmNvbnRyb2xBcmVhVmlzaWJsZZSIjAxyZWNlbnRfcGF0aHOUXZQojB5v
cmFuZ2V3aWRnZXQudXRpbHMuZmlsZWRpYWxvZ3OUjApSZWNlbnRQYXRolJOUKYGUfZQojAdhYnNw
YXRolIxnRDovT25lRHJpdmUgLSBIS1VTVCBDb25uZWN0L+ivvueoiy/lm77or7Tlm77op6PmnLrl
majlrabkuaAyL3dvcmtmbG93L+mihOa1i+WtpuS5oC9kYXRhL3N0b3JlL3RyYWluLmNzdpSMBnBy
ZWZpeJROjAdyZWxwYXRolE6MBXRpdGxllIwAlIwFc2hlZXSUaA6MC2ZpbGVfZm9ybWF0lE51YmgG
KYGUfZQoaAmMYkQ6L09uZURyaXZlIC0gSEtVU1QgQ29ubmVjdC/or77nqIsv5Zu+6K+05Zu+6Kej
5py65Zmo5a2m5LmgMi93b3JrZmxvdy/pooTmtYvlrabkuaAvZGF0YS90dW5uZWwuY3N2lGgLTmgM
TmgNaA5oD2gOaBBOdWJoBimBlH2UKGgJjGZEOi9PbmVEcml2ZSAtIEhLVVNUIENvbm5lY3Qv6K++
56iLL+WbvuivtOWbvuino+acuuWZqOWtpuS5oDIvd29ya2Zsb3cv6aKE5rWL5a2m5LmgL2RhdGEv
Ym9va19zYWxlcy5jc3aUaAtOaAxOaA1oDmgPaA5oEE51YmgGKYGUfZQoaAmMZUQ6L09uZURyaXZl
IC0gSEtVU1QgQ29ubmVjdC/lrabmoKEv56ue6LWbL+i9r+S7tuadry8yMDIyL2RhdGEvZWxlY3Ry
aWNBSS1tYXN0ZXIvZGF0YXNldC9uZXdfdHJhaW4uY3N2lGgLTmgMTmgNaA5oD2gOaBBOdWJoBimB
lH2UKGgJjGtEOi9PbmVEcml2ZSAtIEhLVVNUIENvbm5lY3Qv5a2m5qChL+ernui1my/ova/ku7bm
na8vMjAyMi9kYXRhL2VsZWN0cmljQUktbWFzdGVyL2RhdGFzZXQvbmV3X3RyYWlu6L2s572uLmNz
dpRoC05oDE5oDWgOaA9oDmgQTnViaAYpgZR9lChoCYxdRDovT25lRHJpdmUgLSBIS1VTVCBDb25u
ZWN0L+ivvueoiy/lm77or7Tlm77op6PmnLrlmajlrabkuaAyL3dvcmtmbG93L+mihOa1i+WtpuS5
oC90dW5uZWwuY3N2lGgLTmgMTmgNaA5oD2gOaBBOdWJoBimBlH2UKGgJjGZEOi9PbmVEcml2ZSAt
IEhLVVNUIENvbm5lY3Qv6K++56iLL+WbvuivtOWbvuino+acuuWZqOWtpuS5oDIvd29ya2Zsb3cv
57q957qm5oi/5Lu3L2RhdGEvcmVudC1pZGVhbC5jc3aUaAtOaAxOaA1oDmgPaA5oEE51YmgGKYGU
fZQoaAmMc0Q6L09uZURyaXZlIC0gSEtVU1QgQ29ubmVjdC/or77nqIsv5Lq65bel5pm66IO96YCa
6K+GL3dvcmtmbG93L+esrOS6jOeroC/mlbDmja4va2NfaG91c2VfZGF0Ye+8iOaIv+S7t+mihOa1
i++8iS5jc3aUaAtOaAxOaA1oDmgPaA5oEE51YmgGKYGUfZQoaAmMOUQ6L3Byb2dyYW1taW5nL09y
YW5nZS9vcmFuZ2UzL09yYW5nZS9kYXRhc2V0cy9ob3VzaW5nLnRhYpRoC4wPc2FtcGxlLWRhdGFz
ZXRzlGgMjAtob3VzaW5nLnRhYpRoDWgOaA9oDmgQTnViaAYpgZR9lChoCYw5RDovcHJvZ3JhbW1p
bmcvT3JhbmdlL29yYW5nZTMvT3JhbmdlL2RhdGFzZXRzL3RpdGFuaWMudGFilGgLaCloDIwLdGl0
YW5pYy50YWKUaA1oDmgPaA5oEE51YmgGKYGUfZQoaAmMYUQ6L09uZURyaXZlIC0gSEtVU1QgQ29u
bmVjdC/lrabmoKEv56ue6LWbL+i9r+S7tuadry8yMDIyL2RhdGEvZWxlY3RyaWNBSS1tYXN0ZXIv
ZGF0YXNldC90cmFpbi5jc3aUaAtOaAxOaA1oDmgPaA5oEE51YmgGKYGUfZQoaAmMNkQ6L3Byb2dy
YW1taW5nL09yYW5nZS9vcmFuZ2UzL09yYW5nZS9kYXRhc2V0cy9pcmlzLnRhYpRoC2gpaAyMCGly
aXMudGFilGgNaA5oD2gOaBBOdWJoBimBlH2UKGgJjD9EOi9wcm9ncmFtbWluZy9PcmFuZ2Uvb3Jh
bmdlMy9PcmFuZ2UvZGF0YXNldHMvaGVhcnRfZGlzZWFzZS50YWKUaAtoKWgMjBFoZWFydF9kaXNl
YXNlLnRhYpRoDWgOaA9oDmgQTnViaAYpgZR9lChoCYxARDovcHJvZ3JhbW1pbmcvT3JhbmdlL29y
YW5nZTMvT3JhbmdlL2RhdGFzZXRzL2Jyb3duLXNlbGVjdGVkLnRhYpRoC2gpaAyMEmJyb3duLXNl
bGVjdGVkLnRhYpRoDWgOaA9oDmgQTnViaAYpgZR9lChoCYw1RDovcHJvZ3JhbW1pbmcvT3Jhbmdl
L29yYW5nZTMvT3JhbmdlL2RhdGFzZXRzL3pvby50YWKUaAtoKWgMjAd6b28udGFilGgNaA5oD2gO
aBBOdWJljAtyZWNlbnRfdXJsc5RdlIwTc2F2ZWRXaWRnZXRHZW9tZXRyeZRDQgHZ0MsAAwAAAAAB
wwAAALgAAAQaAAADCAAAAcMAAAC4AAAEGgAAAwgAAAAAAAAAAAWgAAABwwAAALgAAAQaAAADCJSM
C3NoZWV0X25hbWVzlH2UjAZzb3VyY2WUSwCMA3VybJRoDowNZG9tYWluX2VkaXRvcpR9lIwLX192
ZXJzaW9uX1+USwGMEGNvbnRleHRfc2V0dGluZ3OUXZQojBVvcmFuZ2V3aWRnZXQuc2V0dGluZ3OU
jAdDb250ZXh0lJOUKYGUfZQojAZ2YWx1ZXOUfZQojAl2YXJpYWJsZXOUXZRoSn2UaFZdlChdlCiM
AmlklIwUT3JhbmdlLmRhdGEudmFyaWFibGWUjBJDb250aW51b3VzVmFyaWFibGWUk5RLA2gOiGVd
lCiMBGRhdGWUaFyMDFRpbWVWYXJpYWJsZZSTlEsAaA6IZV2UKIwJc3RvcmVfbmJylGhcjBBEaXNj
cmV0ZVZhcmlhYmxllJOUSwBoDohlXZQojAZmYW1pbHmUaGZLAIzsQVVUT01PVElWRSwgQkFCWSBD
QVJFLCBCRUFVVFksIEJFVkVSQUdFUywgQk9PS1MsIEJSRUFEL0JBS0VSWSwgQ0VMRUJSQVRJT04s
IENMRUFOSU5HLCBEQUlSWSwgREVMSSwgRUdHUywgRlJPWkVOIEZPT0RTLCBHUk9DRVJZIEksIEdS
T0NFUlkgSUksIEhBUkRXQVJFLCBIT01FIEFORCBLSVRDSEVOIEksIEhPTUUgQU5EIEtJVENIRU4g
SUksIEhPTUUgQVBQTElBTkNFUywgSE9NRSBDQVJFLCBMQURJRVNXRUFSLCAuLi6UiWVdlCiMBXNh
bGVzlGheSwBoDohlXZQojAtvbnByb21vdGlvbpRoXksDaA6IZWVzaExLAXWMCmF0dHJpYnV0ZXOU
KGhbSwKGlGhgSwSGlGhkSwKGlGhoXZQojApBVVRPTU9USVZFlIwJQkFCWSBDQVJFlIwGQkVBVVRZ
lIwJQkVWRVJBR0VTlIwFQk9PS1OUjAxCUkVBRC9CQUtFUlmUjAtDRUxFQlJBVElPTpSMCENMRUFO
SU5HlIwFREFJUlmUjARERUxJlIwERUdHU5SMDEZST1pFTiBGT09EU5SMCUdST0NFUlkgSZSMCkdS
T0NFUlkgSUmUjAhIQVJEV0FSRZSMEkhPTUUgQU5EIEtJVENIRU4gSZSME0hPTUUgQU5EIEtJVENI
RU4gSUmUjA9IT01FIEFQUExJQU5DRVOUjAlIT01FIENBUkWUjApMQURJRVNXRUFSlIwPTEFXTiBB
TkQgR0FSREVOlIwITElOR0VSSUWUjBBMSVFVT1IsV0lORSxCRUVSlIwJTUFHQVpJTkVTlIwFTUVB
VFOUjA1QRVJTT05BTCBDQVJFlIwMUEVUIFNVUFBMSUVTlIwXUExBWUVSUyBBTkQgRUxFQ1RST05J
Q1OUjAdQT1VMVFJZlIwOUFJFUEFSRUQgRk9PRFOUjAdQUk9EVUNFlIwaU0NIT09MIEFORCBPRkZJ
Q0UgU1VQUExJRVOUjAdTRUFGT09ElGWGlGhrSwKGlGhtSwKGlHSUjAVtZXRhc5QpjApjbGFzc192
YXJzlCmMEm1vZGlmaWVkX3ZhcmlhYmxlc5RdlHViaFEpgZR9lChoVH2UKIwJdmFyaWFibGVzlF2U
jA1kb21haW5fZWRpdG9ylH2UaJ9dlChdlCiMA0RheZRoZksAaA6IZV2UKIwLTnVtVmVoaWNsZXOU
aF5LAWgOiGVlc2hMSwF1aG6MA0RheZRLBIaUjAtOdW1WZWhpY2xlc5RLAoaUhpRomClomSloml2U
dWJldS4=
</properties>
		<properties node_id="1" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 2, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x00\xcd\x00\x00\x00\xc7\x00\x00\x05\x08\x00\x00\x03\xa3\x00\x00\x00\xcd\x00\x00\x00\xc7\x00\x00\x05\x08\x00\x00\x03\xa3\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\xcd\x00\x00\x00\xc7\x00\x00\x05\x08\x00\x00\x03\xa3', 'scriptLibrary': [{'name': 'Table from pandas', 'script': 'import numpy as np\nimport pandas as pd\nfrom Orange.data.pandas_compat import table_from_frame,table_to_frame\nfrom Orange.data import Domain, Table\n\ndf = table_to_frame(in_data) # 你的数据就叫 df 了\n\n############## 以下写入你自己的代码 #####################################\n\n\n\n\n############# 以上写入你自己的代码 #####################################\n\nout_data = table_from_frame(df) # 将你的数据输出\n', 'filename': None}, {'name': 'Table from numpy', 'script': 'import numpy as np\nfrom Orange.data import Table, Domain, ContinuousVariable, DiscreteVariable\n\ndomain = Domain([ContinuousVariable("age"),\n                 ContinuousVariable("height"),\n                 DiscreteVariable("gender", values=("M", "F"))])\narr = np.array([\n  [25, 186, 0],\n  [30, 164, 1]])\nout_data = Table.from_numpy(domain, arr)\n', 'filename': None}, {'name': 'ts_data_preprocess.py', 'script': '# - 选择题参数名|中文描述|选项,格式为: [(\'选项1\', 值, 是否默认), (\'选项2\', 值, 是否默认)]\n# - 填空题参数名|中文描述|[默认值]\n\'\'\'\n- time_name|时间特征名称|[\'date\']\n- y_name|目标名称|[\'sales\']\n- index_names|索引名称|[[\'store_nbr\', \'family\', \'date\']]\n# 周期详见：https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#timeseries-offset-aliases\n- period|周期|[\'D\']\n- year|起始年份|[\'2017\']\n返回值: \n\n\'\'\'\n\nimport pandas as pd\nfrom Orange.data.pandas_compat import table_from_frame,table_to_frame\nimport matplotlib.pyplot as plt \n\nindex_names = in_params[\'index_names\']\ntime_name = in_params[\'time_name\']\nperiod = in_params[\'period\']\nyear = in_params[\'year\']\ny_name = in_params[\'y_name\']\n\ndf = table_to_frame(in_data)\n\nif isinstance(index_names, str):\n    df = df.set_index(index_names).to_period(period)\n    out_object = df\nelse:\n    df[time_name] = df[time_name].dt.to_period(period)\n    df = df.set_index(index_names).sort_index()\n    average_df = df.groupby(time_name).mean().squeeze()\n    if year != \'\':\n        average_df = average_df.loc[average_df.index.year &gt;= int(year)]\n    out_object = average_df\n\nif in_object or in_objects:  \n    if in_object:\n        in_objects = [\'\']\n        in_objects[0] = in_object\n    for func in in_objects:\n        if func.__name__ == \'seasonal_plot\':\n            average_df["week"] = average_df.index.week\n            average_df["day"] = average_df.index.dayofweek\n            func(average_df, y=y_name, period=\'week\', freq=\'day\')\n        elif func.__name__ == \'plot_periodogram\':\n            func(average_df)\n        plt.figure()\n\n\n    plt.show()\n\n', 'filename': 'D:/programming/Orange/orange3/Orange/scriptStore/ts_data_preprocess.py'}], 'scriptText': '# - 选择题参数名|中文描述|选项,格式为: [(\'选项1\', 值, 是否默认), (\'选项2\', 值, 是否默认)]\n# - 填空题参数名|中文描述|[默认值]\n\'\'\'\n- time_name|时间特征名称|[\'date\']\n- y_name|目标名称|[\'sales\']\n- index_names|索引名称|[[\'store_nbr\', \'family\', \'date\']]\n# 周期详见：https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#timeseries-offset-aliases\n- period|周期|[\'D\']\n- year|起始年份|[\'2017\']\n返回值: \n\n\'\'\'\n\nimport pandas as pd\nfrom Orange.data.pandas_compat import table_from_frame,table_to_frame\nimport matplotlib.pyplot as plt \n\nindex_names = in_params[\'index_names\']\ntime_name = in_params[\'time_name\']\nperiod = in_params[\'period\']\nyear = in_params[\'year\']\ny_name = in_params[\'y_name\']\n\ndf = table_to_frame(in_data)\n\nif isinstance(index_names, str):\n    df = df.set_index(index_names).to_period(period)\n    out_object = df\nelse:\n    df[time_name] = df[time_name].dt.to_period(period)\n    df = df.set_index(index_names).sort_index()\n    average_df = df.groupby(time_name).mean().squeeze()\n    if year != \'\':\n        average_df = average_df.loc[average_df.index.year &gt;= int(year)]\n    out_object = average_df\n\nif in_object or in_objects:  \n    if in_object:\n        in_objects = [\'\']\n        in_objects[0] = in_object\n    for func in in_objects:\n        if func.__name__ == \'seasonal_plot\':\n            average_df["week"] = average_df.index.week\n            average_df["day"] = average_df.index.dayofweek\n            func(average_df, y=y_name, period=\'week\', freq=\'day\')\n        elif func.__name__ == \'plot_periodogram\':\n            func(average_df)\n        plt.figure()\n\n\n    plt.show()\n\n', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x9d\x00\x00\x00]\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 3}</properties>
		<properties node_id="2" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 2, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x00\xcf\x00\x00\x00T\x00\x00\x05\x0c\x00\x00\x03O\x00\x00\x00\xd0\x00\x00\x00r\x00\x00\x05\x0b\x00\x00\x03N\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\xd0\x00\x00\x00r\x00\x00\x05\x0b\x00\x00\x03N', 'scriptLibrary': [{'name': 'Table from pandas', 'script': 'import numpy as np\nimport pandas as pd\nfrom Orange.data.pandas_compat import table_from_frame,table_to_frame\nfrom Orange.data import Domain, Table\n\ndf = table_to_frame(in_data) # 你的数据就叫 df 了\n\n############## 以下写入你自己的代码 #####################################\n\n\n\n\n############# 以上写入你自己的代码 #####################################\n\nout_data = table_from_frame(df) # 将你的数据输出\n', 'filename': None}, {'name': 'Table from numpy', 'script': 'import numpy as np\nfrom Orange.data import Table, Domain, ContinuousVariable, DiscreteVariable\n\ndomain = Domain([ContinuousVariable("age"),\n                 ContinuousVariable("height"),\n                 DiscreteVariable("gender", values=("M", "F"))])\narr = np.array([\n  [25, 186, 0],\n  [30, 164, 1]])\nout_data = Table.from_numpy(domain, arr)\n', 'filename': None}, {'name': 'plot_periodogram.py', 'script': 'import matplotlib.pyplot as plt \nimport seaborn as sns\nimport pandas as pd\n\ndef plot_periodogram(ts, detrend=\'linear\', ax=None):\n    from scipy.signal import periodogram\n    fs = pd.Timedelta("1Y") / pd.Timedelta("1D")\n    freqencies, spectrum = periodogram(\n        ts,\n        fs=fs,\n        detrend=detrend,\n        window="boxcar",\n        scaling=\'spectrum\',\n    )\n    if ax is None:\n        _, ax = plt.subplots()\n    ax.step(freqencies, spectrum, color="purple")\n    ax.set_xscale("log")\n    ax.set_xticks([1, 2, 4, 6, 12, 26, 52, 104])\n    ax.set_xticklabels(\n        [\n            "Annual (1)",\n            "Semiannual (2)",\n            "Quarterly (4)",\n            "Bimonthly (6)",\n            "Monthly (12)",\n            "Biweekly (26)",\n            "Weekly (52)",\n            "Semiweekly (104)",\n        ],\n        rotation=30,\n    )\n    ax.ticklabel_format(axis="y", style="sci", scilimits=(0, 0))\n    ax.set_ylabel("Variance")\n    ax.set_title("Periodogram")\n    return ax\n\nout_object = plot_periodogram', 'filename': 'D:/programming/Orange/orange3/Orange/scriptStore/utils/plot_periodogram.py'}], 'scriptText': 'import matplotlib.pyplot as plt \nimport seaborn as sns\nimport pandas as pd\n\ndef plot_periodogram(ts, detrend=\'linear\', ax=None):\n    from scipy.signal import periodogram\n    fs = pd.Timedelta("1Y") / pd.Timedelta("1D")\n    freqencies, spectrum = periodogram(\n        ts,\n        fs=fs,\n        detrend=detrend,\n        window="boxcar",\n        scaling=\'spectrum\',\n    )\n    if ax is None:\n        _, ax = plt.subplots()\n    ax.step(freqencies, spectrum, color="purple")\n    ax.set_xscale("log")\n    ax.set_xticks([1, 2, 4, 6, 12, 26, 52, 104])\n    ax.set_xticklabels(\n        [\n            "Annual (1)",\n            "Semiannual (2)",\n            "Quarterly (4)",\n            "Bimonthly (6)",\n            "Monthly (12)",\n            "Biweekly (26)",\n            "Weekly (52)",\n            "Semiweekly (104)",\n        ],\n        rotation=30,\n    )\n    ax.ticklabel_format(axis="y", style="sci", scilimits=(0, 0))\n    ax.set_ylabel("Variance")\n    ax.set_title("Periodogram")\n    return ax\n\nout_object = plot_periodogram', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x9d\x00\x00\x00]\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 3}</properties>
		<properties node_id="3" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 2, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x00\xcf\x00\x00\x00T\x00\x00\x05\x0c\x00\x00\x03O\x00\x00\x00\xd0\x00\x00\x00r\x00\x00\x05\x0b\x00\x00\x03N\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\xd0\x00\x00\x00r\x00\x00\x05\x0b\x00\x00\x03N', 'scriptLibrary': [{'name': 'Table from pandas', 'script': 'import numpy as np\nimport pandas as pd\nfrom Orange.data.pandas_compat import table_from_frame,table_to_frame\nfrom Orange.data import Domain, Table\n\ndf = table_to_frame(in_data) # 你的数据就叫 df 了\n\n############## 以下写入你自己的代码 #####################################\n\n\n\n\n############# 以上写入你自己的代码 #####################################\n\nout_data = table_from_frame(df) # 将你的数据输出\n', 'filename': None}, {'name': 'Table from numpy', 'script': 'import numpy as np\nfrom Orange.data import Table, Domain, ContinuousVariable, DiscreteVariable\n\ndomain = Domain([ContinuousVariable("age"),\n                 ContinuousVariable("height"),\n                 DiscreteVariable("gender", values=("M", "F"))])\narr = np.array([\n  [25, 186, 0],\n  [30, 164, 1]])\nout_data = Table.from_numpy(domain, arr)\n', 'filename': None}, {'name': 'seasonal_plot.py', 'script': 'import matplotlib.pyplot as plt \nimport seaborn as sns\nimport pandas as pd\n\ndef seasonal_plot(X, y, period, freq, ax=None):\n    if ax is None:\n        _, ax = plt.subplots()\n    palette = sns.color_palette("husl", n_colors=X[period].nunique(),)\n    ax = sns.lineplot(\n        x=freq,\n        y=y,\n        hue=period,\n        data=X,\n        ci=False,\n        ax=ax,\n        palette=palette,\n        legend=False,\n    )\n    ax.set_title(f"Seasonal Plot ({period}/{freq})")\n    for line, name in zip(ax.lines, X[period].unique()):\n        y_ = line.get_ydata()[-1]\n        ax.annotate(\n            name,\n            xy=(1, y_),\n            xytext=(6, 0),\n            color=line.get_color(),\n            xycoords=ax.get_yaxis_transform(),\n            textcoords="offset points",\n            size=14,\n            va="center",\n        )\n    return ax\n\nout_object = seasonal_plot', 'filename': 'D:/programming/Orange/orange3/Orange/scriptStore/utils/seasonal_plot.py'}], 'scriptText': 'import matplotlib.pyplot as plt \nimport seaborn as sns\nimport pandas as pd\n\ndef seasonal_plot(X, y, period, freq, ax=None):\n    if ax is None:\n        _, ax = plt.subplots()\n    palette = sns.color_palette("husl", n_colors=X[period].nunique(),)\n    ax = sns.lineplot(\n        x=freq,\n        y=y,\n        hue=period,\n        data=X,\n        ci=False,\n        ax=ax,\n        palette=palette,\n        legend=False,\n    )\n    ax.set_title(f"Seasonal Plot ({period}/{freq})")\n    for line, name in zip(ax.lines, X[period].unique()):\n        y_ = line.get_ydata()[-1]\n        ax.annotate(\n            name,\n            xy=(1, y_),\n            xytext=(6, 0),\n            color=line.get_color(),\n            xycoords=ax.get_yaxis_transform(),\n            textcoords="offset points",\n            size=14,\n            va="center",\n        )\n    return ax\n\nout_object = seasonal_plot', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x9d\x00\x00\x00]\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 3}</properties>
		<properties node_id="4" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 2, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x00\xd0\x00\x00\x00r\x00\x00\x05\x0b\x00\x00\x03N\x00\x00\x00\xd0\x00\x00\x00r\x00\x00\x05\x0b\x00\x00\x03N\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\xd0\x00\x00\x00r\x00\x00\x05\x0b\x00\x00\x03N', 'scriptLibrary': [{'name': 'Table from pandas', 'script': 'import numpy as np\nimport pandas as pd\nfrom Orange.data.pandas_compat import table_from_frame,table_to_frame\nfrom Orange.data import Domain, Table\n\ndf = table_to_frame(in_data) # 你的数据就叫 df 了\n\n############## 以下写入你自己的代码 #####################################\n\n\n\n\n############# 以上写入你自己的代码 #####################################\n\nout_data = table_from_frame(df) # 将你的数据输出\n', 'filename': None}, {'name': 'Table from numpy', 'script': 'import numpy as np\nfrom Orange.data import Table, Domain, ContinuousVariable, DiscreteVariable\n\ndomain = Domain([ContinuousVariable("age"),\n                 ContinuousVariable("height"),\n                 DiscreteVariable("gender", values=("M", "F"))])\narr = np.array([\n  [25, 186, 0],\n  [30, 164, 1]])\nout_data = Table.from_numpy(domain, arr)\n', 'filename': None}, {'name': 'create_seasonal_features.py', 'script': "# - 选择题参数名|中文描述|选项,格式为: [('选项1', 值, 是否默认), ('选项2', 值, 是否默认)]\n# - 填空题参数名|中文描述|[默认值]\n'''\n- y_name|目标名称|['sales']\n返回值: \n\n'''\n\nfrom statsmodels.tsa.deterministic import CalendarFourier, DeterministicProcess\ny_name = in_params['y_name']\n\ndf = in_object\n\nfourier = CalendarFourier(freq='M', order=4)\ndp = DeterministicProcess(\n    index=df.index,\n    constant=True,\n    order=1,\n    seasonal=True,\n    additional_terms=[fourier],\n    drop=True,\n)\nX = dp.in_sample()\n\nout_object = [X, df[y_name]]", 'filename': 'D:/programming/Orange/orange3/Orange/scriptStore/create_seasonal_features.py'}], 'scriptText': "# - 选择题参数名|中文描述|选项,格式为: [('选项1', 值, 是否默认), ('选项2', 值, 是否默认)]\n# - 填空题参数名|中文描述|[默认值]\n'''\n- y_name|目标名称|['sales']\n返回值: \n\n'''\n\nfrom statsmodels.tsa.deterministic import CalendarFourier, DeterministicProcess\ny_name = in_params['y_name']\n\ndf = in_object\n\nfourier = CalendarFourier(freq='M', order=4)\ndp = DeterministicProcess(\n    index=df.index,\n    constant=True,\n    order=1,\n    seasonal=True,\n    additional_terms=[fourier],\n    drop=True,\n)\nX = dp.in_sample()\n\nout_object = [X, df[y_name]]", 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x9d\x00\x00\x00]\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 3}</properties>
		<properties node_id="5" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 2, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x00\xcf\x00\x00\x00T\x00\x00\x05\x0c\x00\x00\x03O\x00\x00\x00\xd0\x00\x00\x00r\x00\x00\x05\x0b\x00\x00\x03N\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\xd0\x00\x00\x00r\x00\x00\x05\x0b\x00\x00\x03N', 'scriptLibrary': [{'name': 'Table from pandas', 'script': 'import numpy as np\nimport pandas as pd\nfrom Orange.data.pandas_compat import table_from_frame,table_to_frame\nfrom Orange.data import Domain, Table\n\ndf = table_to_frame(in_data) # 你的数据就叫 df 了\n\n############## 以下写入你自己的代码 #####################################\n\n\n\n\n############# 以上写入你自己的代码 #####################################\n\nout_data = table_from_frame(df) # 将你的数据输出\n', 'filename': None}, {'name': 'Table from numpy', 'script': 'import numpy as np\nfrom Orange.data import Table, Domain, ContinuousVariable, DiscreteVariable\n\ndomain = Domain([ContinuousVariable("age"),\n                 ContinuousVariable("height"),\n                 DiscreteVariable("gender", values=("M", "F"))])\narr = np.array([\n  [25, 186, 0],\n  [30, 164, 1]])\nout_data = Table.from_numpy(domain, arr)\n', 'filename': None}, {'name': 'plot_periodogram.py', 'script': 'import matplotlib.pyplot as plt \nimport seaborn as sns\nimport pandas as pd\n\ndef plot_periodogram(ts, detrend=\'linear\', ax=None):\n    from scipy.signal import periodogram\n    fs = pd.Timedelta("1Y") / pd.Timedelta("1D")\n    freqencies, spectrum = periodogram(\n        ts,\n        fs=fs,\n        detrend=detrend,\n        window="boxcar",\n        scaling=\'spectrum\',\n    )\n    if ax is None:\n        _, ax = plt.subplots()\n    ax.step(freqencies, spectrum, color="purple")\n    ax.set_xscale("log")\n    ax.set_xticks([1, 2, 4, 6, 12, 26, 52, 104])\n    ax.set_xticklabels(\n        [\n            "Annual (1)",\n            "Semiannual (2)",\n            "Quarterly (4)",\n            "Bimonthly (6)",\n            "Monthly (12)",\n            "Biweekly (26)",\n            "Weekly (52)",\n            "Semiweekly (104)",\n        ],\n        rotation=30,\n    )\n    ax.ticklabel_format(axis="y", style="sci", scilimits=(0, 0))\n    ax.set_ylabel("Variance")\n    ax.set_title("Periodogram")\n    return ax\n\nout_object = plot_periodogram', 'filename': 'D:/programming/Orange/orange3/Orange/scriptStore/utils/plot_periodogram.py'}], 'scriptText': 'import matplotlib.pyplot as plt \nimport seaborn as sns\nimport pandas as pd\n\ndef plot_periodogram(ts, detrend=\'linear\', ax=None):\n    from scipy.signal import periodogram\n    fs = pd.Timedelta("1Y") / pd.Timedelta("1D")\n    freqencies, spectrum = periodogram(\n        ts,\n        fs=fs,\n        detrend=detrend,\n        window="boxcar",\n        scaling=\'spectrum\',\n    )\n    if ax is None:\n        _, ax = plt.subplots()\n    ax.step(freqencies, spectrum, color="purple")\n    ax.set_xscale("log")\n    ax.set_xticks([1, 2, 4, 6, 12, 26, 52, 104])\n    ax.set_xticklabels(\n        [\n            "Annual (1)",\n            "Semiannual (2)",\n            "Quarterly (4)",\n            "Bimonthly (6)",\n            "Monthly (12)",\n            "Biweekly (26)",\n            "Weekly (52)",\n            "Semiweekly (104)",\n        ],\n        rotation=30,\n    )\n    ax.ticklabel_format(axis="y", style="sci", scilimits=(0, 0))\n    ax.set_ylabel("Variance")\n    ax.set_title("Periodogram")\n    return ax\n\nout_object = plot_periodogram', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x9d\x00\x00\x00]\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 3}</properties>
		<properties node_id="6" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 2, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x00\xd3\x00\x00\x00Z\x00\x00\x05\x10\x00\x00\x03U\x00\x00\x00\xd4\x00\x00\x00x\x00\x00\x05\x0f\x00\x00\x03T\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\xd4\x00\x00\x00x\x00\x00\x05\x0f\x00\x00\x03T', 'scriptLibrary': [{'name': 'Table from pandas', 'script': 'import numpy as np\nimport pandas as pd\nfrom Orange.data.pandas_compat import table_from_frame,table_to_frame\nfrom Orange.data import Domain, Table\n\ndf = table_to_frame(in_data) # 你的数据就叫 df 了\n\n############## 以下写入你自己的代码 #####################################\n\n\n\n\n############# 以上写入你自己的代码 #####################################\n\nout_data = table_from_frame(df) # 将你的数据输出\n', 'filename': None}, {'name': 'Table from numpy', 'script': 'import numpy as np\nfrom Orange.data import Table, Domain, ContinuousVariable, DiscreteVariable\n\ndomain = Domain([ContinuousVariable("age"),\n                 ContinuousVariable("height"),\n                 DiscreteVariable("gender", values=("M", "F"))])\narr = np.array([\n  [25, 186, 0],\n  [30, 164, 1]])\nout_data = Table.from_numpy(domain, arr)\n', 'filename': None}, {'name': 'fit_and_plot_seasonal.py', 'script': '# - 选择题参数名|中文描述|选项,格式为: [(\'选项1\', 值, 是否默认), (\'选项2\', 值, 是否默认)]\n# - 填空题参数名|中文描述|[\'默认值\']\n\'\'\'\n- title_seasonal|周期图标题|[\'Average Sales\']\n- title_orig|原始图标题|[\'Product Sales Frequency Components\']\n- title_detrend|去除周期图标题|[\'Deseasonalized\']\n返回值: \n\n\'\'\'\n\nfrom sklearn.linear_model import LinearRegression\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ntitle_seasonal = in_params[\'title_seasonal\']\ntitle_orig = in_params[\'title_orig\']\ntitle_detrend = in_params[\'title_detrend\']\n\nif in_object:\n    in_objects = [\'\']\n    in_objects[0] = in_object\n    assert(len(in_objects[0]) == 2), \'需要传入数据\'\n\nplot_func = None\nfor obj in in_objects:\n    if type(obj) is list:\n        X = obj[0]\n        y = obj[1]\n    elif hasattr(obj, \'__call__\'):\n        plot_func = obj\n\nmodel = LinearRegression().fit(X, y)\ny_pred = pd.Series(\n    model.predict(X),\n    index=X.index,\n    name=\'Fitted\',\n)\n\nout_object = y_pred\n\ny_pred = pd.Series(model.predict(X), index=X.index)\nax = y.plot(alpha=0.5, title=title_seasonal, ylabel="items sold")\nax = y_pred.plot(ax=ax, label="Seasonal")\nax.legend()\n\ny_deseason = y - y_pred\n\nif plot_func and plot_func.__name__ == \'plot_periodogram\':\n\n    fig, (ax1, ax2) = plt.subplots(2, 1, sharex=True, sharey=True, figsize=(10, 7))\n    ax1 = plot_func(y, ax=ax1)\n    ax1.set_title(title_orig)\n    ax2 = plot_func(y_deseason, ax=ax2)\n    ax2.set_title(title_detrend)\n\nplt.show()\n\n', 'filename': 'D:/programming/Orange/orange3/Orange/scriptStore/fit_and_plot_seasonal.py'}], 'scriptText': '# - 选择题参数名|中文描述|选项,格式为: [(\'选项1\', 值, 是否默认), (\'选项2\', 值, 是否默认)]\n# - 填空题参数名|中文描述|[\'默认值\']\n\'\'\'\n- title_seasonal|周期图标题|[\'Average Sales\']\n- title_orig|原始图标题|[\'Product Sales Frequency Components\']\n- title_detrend|去除周期图标题|[\'Deseasonalized\']\n返回值: \n\n\'\'\'\n\nfrom sklearn.linear_model import LinearRegression\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ntitle_seasonal = in_params[\'title_seasonal\']\ntitle_orig = in_params[\'title_orig\']\ntitle_detrend = in_params[\'title_detrend\']\n\nif in_object:\n    in_objects = [\'\']\n    in_objects[0] = in_object\n    assert(len(in_objects[0]) == 2), \'需要传入数据\'\n\nplot_func = None\nfor obj in in_objects:\n    if type(obj) is list:\n        X = obj[0]\n        y = obj[1]\n    elif hasattr(obj, \'__call__\'):\n        plot_func = obj\n\nmodel = LinearRegression().fit(X, y)\ny_pred = pd.Series(\n    model.predict(X),\n    index=X.index,\n    name=\'Fitted\',\n)\n\nout_object = y_pred\n\ny_pred = pd.Series(model.predict(X), index=X.index)\nax = y.plot(alpha=0.5, title=title_seasonal, ylabel="items sold")\nax = y_pred.plot(ax=ax, label="Seasonal")\nax.legend()\n\ny_deseason = y - y_pred\n\nif plot_func and plot_func.__name__ == \'plot_periodogram\':\n\n    fig, (ax1, ax2) = plt.subplots(2, 1, sharex=True, sharey=True, figsize=(10, 7))\n    ax1 = plot_func(y, ax=ax1)\n    ax1.set_title(title_orig)\n    ax2 = plot_func(y_deseason, ax=ax2)\n    ax2.set_title(title_detrend)\n\nplt.show()\n\n', 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x9d\x00\x00\x00]\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', 'vimModeEnabled': False, '__version__': 3}</properties>
		<properties node_id="7" format="literal">{'auto_commit': True, 'color_by_class': True, 'controlAreaVisible': True, 'dist_color_RGB': (220, 220, 220, 255), 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x00\x8d\x00\x00\x00\x99\x00\x00\x05/\x00\x00\x02\x8c\x00\x00\x00\x8d\x00\x00\x00\x99\x00\x00\x05/\x00\x00\x02\x8c\x00\x00\x00\x00\x00\x00\x00\x00\x05\xa0\x00\x00\x00\x8d\x00\x00\x00\x99\x00\x00\x05/\x00\x00\x02\x8c', 'select_rows': True, 'selected_cols': [], 'selected_rows': [], 'show_attribute_labels': True, 'show_distributions': False, '__version__': 2}</properties>
	</node_properties>
	<session_state>
		<window_groups />
	</session_state>
</scheme>
